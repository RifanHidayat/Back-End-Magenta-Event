'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CollectionError = require('./CollectionError');

var _CollectionError2 = _interopRequireDefault(_CollectionError);

var _Data = require('./Data');

var _Data2 = _interopRequireDefault(_Data);

var _Entity2 = require('./Entity');

var _Entity3 = _interopRequireDefault(_Entity2);

var _Library = require('./Library');

var _Library2 = _interopRequireDefault(_Library);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Creates a valid collection+json query object
 *
 * @author S. Fleming <nuxnik@int5.net>
 * @since Tue Jul 25 11:07:32 CEST 2017
 */
var Query = function (_Entity) {
  _inherits(Query, _Entity);

  _createClass(Query, null, [{
    key: 'getByObject',

    /**
     * Get query object by json data object
     *
     * @param {Object} json The JSON object
     * @param {Object} config The axios configuration object. See axios documentation for more options
     * @param {Object} cache The caching object
     * @return query
     */
    value: function getByObject(json) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var cache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      //check the href
      var hrefString = Query.getObjectValueByKey(json, "href");
      if (hrefString === undefined) {
        throw new _CollectionError2.default('query.href String undefined');
      }

      //check the rel
      var relString = Query.getObjectValueByKey(json, "rel");
      if (relString === undefined) {
        throw new _CollectionError2.default('query.rel String undefined');
      }

      //check the prompt
      var promptString = Query.getObjectValueByKey(json, "prompt");

      // init the object
      var query = new Query(hrefString, relString, promptString, config, cache);

      // check the data object
      var datasObject = Query.getObjectValueByKey(json, "data");
      if (_Library2.default.isArray(datasObject)) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = datasObject[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var dataObject = _step.value;


            // add the data
            try {
              var data = _Data2.default.getByObject(dataObject);
              query.addData(data);
            } catch (error) {
              // skip this data
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      return query;
    }
    /**
     * The class constructor
     *
     * @param string href The link uri
     * @param string rel The relational element
     * @param string prompt The prompt string
     * @param {Object} cache The caching object
     */

  }]);

  function Query(href, rel) {
    var prompt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var cache = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

    _classCallCheck(this, Query);

    var _this = _possibleConstructorReturn(this, (Query.__proto__ || Object.getPrototypeOf(Query)).call(this));

    _this.setHref(href);
    _this.setRel(rel);
    _this.setPrompt(prompt);

    /**
     * The global axios client configuration object
     */
    _this.config = config;

    /**
     * The data object
     *
     * @var array
     */
    _this.data = [];

    /**
     * The cache object
     *
     * @var array
     */
    _this.cache = cache;
    return _this;
  }

  /**
   * Add data object to the collection
   *
   * @param object data The data object
   * @see Data
   * @return Query
   */


  _createClass(Query, [{
    key: 'addData',
    value: function addData(data) {
      this.data.push(data);

      return this;
    }

    /**
     * Get array of data strings
     *
     * @return array
     */

  }, {
    key: 'getData',
    value: function getData() {
      return this.data;
    }

    /**
     * Get the link string
     *
     * @return string
     */

  }, {
    key: 'getHref',
    value: function getHref() {
      return this.href;
    }

    /**
     * Set the link string
     *
     * @param string link The link uri
     * @return Link
     */

  }, {
    key: 'setHref',
    value: function setHref(href) {
      this.href = href;

      return this;
    }

    /**
     * Get the rel string
     *
     * @return string
     */

  }, {
    key: 'getRel',
    value: function getRel() {
      return this.rel;
    }

    /**
     * Set the rel string
     *
     * @param string rel The rel element
     * @return rel
     */

  }, {
    key: 'setRel',
    value: function setRel(rel) {
      this.rel = rel;

      return this;
    }

    /**
     * Get the prompt string
     *
     * @return string
     */

  }, {
    key: 'getPrompt',
    value: function getPrompt() {
      return this.prompt;
    }

    /**
     * Set the prompt string
     *
     * @param string prompt The prompt string
     * @return data
     */

  }, {
    key: 'setPrompt',
    value: function setPrompt(prompt) {
      this.prompt = prompt;

      return this;
    }

    /**
     * Set a value by name
     *
     * @param {String} name The name of the value
     * @param {String} value The value of the data
     * @param {String} prompt The prompt value of the data
     * @return Query
     */

  }, {
    key: 'setData',
    value: function setData(name, value) {
      var prompt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      // get the value by name
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.getData()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var data = _step2.value;

          if (data.getName() == name) {
            data.setValue(value);
            if (prompt !== null) {
              data.setPrompt(prompt);
            }
            return this;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.addData(new _Data2.default(name, value, prompt));

      return this;
    }

    /**
     * Query the server
     *
     * @param {Object} config The axios configuration object. See axios documentation for more options
     * @return Promise<Collection>
     */

  }, {
    key: 'query',
    value: function query() {
      var _this2 = this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // get the config values
      var mergedConfig = _Library2.default.mergeConfigurationValues(this.config, config);

      // build the query
      var href = this.getHref() + '?';
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.getData()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var data = _step3.value;

          href = href + data.getName() + '=' + data.getValue() + '&';
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      if (this.cache !== null && this.cache.isResourceCached(href)) {
        return Promise.resolve(this.cache.getCollectionByResource(hrel));
      } else {
        return _axios2.default.get(href, mergedConfig).then(function (response) {
          response.data.collection.href = href;
          var collection = Collection.getByObject(response.data, mergedConfig, _this2.cache);
          _this2.cache.addCollection(collection);
          return collection;
        }).catch(function (error) {
          var collection = Collection.getByObject(error.response.data, _this2.config, _this2.cache);
          return collection;
        });
      }
    }

    /**
     * Get compiled json object
     *
     * @return Object
     */

  }, {
    key: 'getJson',
    value: function getJson() {
      // push the data
      var query = {};
      if (this.href) {
        query.href = this.getHref();
      }
      if (this.rel) {
        query.rel = this.getRel();
      }
      if (this.prompt) {
        query.prompt = this.getPrompt();
      }

      if (this.getData().length > 0) {
        query.data = [];
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = this.getData()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var data = _step4.value;

            query.data.push(data.getJson());
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }

      return query;
    }

    /**
     * Add collection to cache
     *
     * @param Collection collection The collection to cache
     * @return Query
     */

  }, {
    key: 'addCache',
    value: function addCache(collection) {
      if (this.cache !== null) {
        this.cache.addCollection(collection);
      }
      return this;
    }
  }]);

  return Query;
}(_Entity3.default);

exports.default = Query;