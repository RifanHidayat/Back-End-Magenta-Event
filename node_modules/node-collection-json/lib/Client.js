'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Item = require('./Item');

var _Item2 = _interopRequireDefault(_Item);

var _Collection = require('./Collection');

var _Collection2 = _interopRequireDefault(_Collection);

var _Library = require('./Library');

var _Library2 = _interopRequireDefault(_Library);

var _QueryBuilder = require('./QueryBuilder');

var _QueryBuilder2 = _interopRequireDefault(_QueryBuilder);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class: Client for communication with collection+json enabled servers
 *
 * @author S. Fleming <nuxnik@int5.net>
 * @since Mon Aug 14 16:47:09 CEST 2017
 */
var Client = function () {
  _createClass(Client, null, [{
    key: 'API',

    /**
     * The API type
     *
     * @return string
     */
    get: function get() {
      return "api";
    }

    /**
     * The API type
     *
     * @return string
     */

  }, {
    key: 'DELIMITER',
    get: function get() {
      return ">";
    }

    /**
     * The JSON type
     *
     * @return string
     */

  }, {
    key: 'JSON',
    get: function get() {
      return "json";
    }

    /**
     * The class constructor
     *
     * @param {mixed} resource The resource url or collection object
     * @param {Object} config The axios option object. See axios documentation for possible configuration options
     * @param {String} type The type of resource
     * @param {Cache} cache The Caching object.
     */

  }]);

  function Client(resource) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Client.API;
    var cache = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    _classCallCheck(this, Client);

    // The main collection object
    this.collection = null;

    // The resource address
    this.resource = null;

    // The global axios client configuration object
    this.config = config;

    // the cache object
    this.cache = cache;

    switch (type) {
      case Client.JSON:
        this.collection = resource;
        this.resource = this.collection.getHref();
        if (this.cache != null) {
          this.cache.addCollection(this.collection);
        }
        break;
      default:
      case Client.API:
        this.resource = resource;
        break;
    }
  }

  /**
   * Call the API and get collection object
   *
   * @param {String} resource The resource string
   * @param {Object} config The axios configuration object. See axios documentation for more options
   * @return Promise
   */


  _createClass(Client, [{
    key: 'getCollectionByResource',
    value: function getCollectionByResource(resource) {
      var _this = this;

      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // get the config values
      var mergedConfig = _Library2.default.mergeConfigurationValues(this.config, config);

      if (this.cache != null && this.cache.isResourceCached(resource)) {
        return Promise.resolve(this.cache.getCollectionByResource(resource));
      } else {
        return _axios2.default.get(resource, mergedConfig).then(function (response) {
          response.data.collection.href = resource;
          var collection = _Collection2.default.getByObject(response.data, mergedConfig, _this.cache);
          return collection;
        });
      }
    }

    /**
     * Get the collection
     *
     * @return Collection
     */

  }, {
    key: 'getCollection',
    value: function getCollection() {
      if (this.collection === null) {
        return this.getCollectionByResource(this.resource);
      } else {
        return Promise.resolve(this.collection);
      }
    }

    /**
     * Hop the item API links recursively
     *
     * @param {QueryBuilder} path The rel path to follow
     * @param {Collection} collection The collection to crawl
     * @return Promise
     */

  }, {
    key: 'query',
    value: function query(queryBuilder) {
      var _this2 = this;

      var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (queryBuilder !== '') {

        // get the current and next query increment the index
        var query = queryBuilder.current();

        if (query !== undefined && (query.getNode() || query.getLink())) {
          if (collection == null) {
            return this.getCollection().then(function (collection) {
              return _this2.query(queryBuilder, collection);
            });
          } else {
            var resource = '';
            if (query.getLink()) {
              resource = query.getLink();
            } else {
              resource = collection.getLinkByRel(query.getNode()).getHref();
            }
            if (typeof resource === 'string' && resource !== '') {
              resource += query.getHrefExtension();
              if (resource.match(/\?/)) {
                resource += '&' + query.getParamsAsString();
              } else if (query.getParamsAsString()) {
                resource += '?' + query.getParamsAsString();
              }
              return this.getCollectionByResource(resource).then(function (collection) {
                if (query.hasIndex()) {
                  queryBuilder.next();
                  return _this2.query(queryBuilder, collection.getItemByIndex(query.getIndex()));
                } else if (query.isSearchable()) {
                  queryBuilder.next();
                  return _this2.query(queryBuilder, collection.getItemByKeyAndValue(query.getSearchKey(), query.getSearchValue()));
                } else {
                  queryBuilder.next();
                  return _this2.query(queryBuilder, collection);
                }
              }).catch(function (errorCollection) {
                return errorCollection;
              });
            }
          }
        }
      }
      return collection;
    }

    /**
     * Hop the item API links recursively
     *
     * @param {String} path The rel path to follow
     * @param {Collection} collection The collection to crawl
     * @return Promise
     */

  }, {
    key: 'hop',
    value: function hop(path) {
      var _this3 = this;

      var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (path !== '') {
        var rels = path.split(Client.DELIMITER);
        var rel = rels.shift();
        var modifiedPath = rels.join(Client.DELIMITER);

        if (collection == null) {
          return this.getCollection().then(function (collection) {
            return _this3.hop(path, collection);
          });
        } else {

          var values = null;

          // array of all items in the collection
          if (values = rel.match(/(\w+)\[\]$/)) {

            var resource = collection.getLinkByRel(values[1]).getHref();
            return this.getCollectionByResource(resource).then(function (collection) {
              return _this3.hop(modifiedPath, collection);
            }).catch(function (errorCollection) {
              return errorCollection;
            });

            // get item link and specific item by key value
          } else if (values = rel.match(/(\w+)\(\s*(?:\"|\')?([\w]+)(?:\"|\')?\s*,\s*(?:\"|\')?([\w]+)(?:\"|\')?\s*\)$/)) {

            var _resource = collection.getLinkByRel(values[1]).getHref();
            return this.getCollectionByResource(_resource).then(function (collection) {
              return _this3.hop(modifiedPath, collection.getItemByKeyAndValue(values[2], values[3]));
            }).catch(function (errorCollection) {
              return errorCollection;
            });

            // get item link and specific item by index
          } else if (values = rel.match(/(\w+)\[([0-9]+)\]$/)) {

            var _resource2 = collection.getLinkByRel(values[1]).getHref();
            return this.getCollectionByResource(_resource2).then(function (collection) {
              return _this3.hop(modifiedPath, collection.getItemByIndex(values[2]));
            }).catch(function (errorCollection) {
              return errorCollection;
            });

            // get root link and specific item by index
          } else if (values = rel.match(/(\w+){([0-9]+)}$/)) {

            var _resource3 = collection.getLinkByRel(values[1]).getHref();
            return this.getCollectionByResource(_resource3).then(function (collection) {
              return _this3.hop(modifiedPath, collection.getItemByIndex(values[2]));
            }).catch(function (errorCollection) {
              return errorCollection;
            });
          } else {

            var _resource4 = collection.getLinkByRel(rel).getHref();
            collection = this.getCollectionByResource(_resource4).then(function (collection) {
              return _this3.hop(modifiedPath, collection);
            }).catch(function (errorCollection) {
              return errorCollection;
            });
          }
        }
      }
      return collection;
    }

    /**
     * Get the resource string
     *
     * @return {String}
     */

  }, {
    key: 'getResource',
    value: function getResource() {
      return this.resource;
    }

    /**
     * getCache
     *
     * @since Tue Apr 10 15:19:04 CEST 2018
     * @return Cache
     */

  }, {
    key: 'getCache',
    value: function getCache() {
      return this.cache;
    }

    /**
     * Reset and empty the cache
     *
     * @since Tue Apr 10 13:17:40 CEST 2018
     * @return Client
     */

  }, {
    key: 'resetCache',
    value: function resetCache() {
      if (this.cache != null) {
        this.cache.reset();
      }

      return this;
    }

    /**
     * Get the config object
     *
     * @return Object
     */

  }, {
    key: 'getConfig',
    value: function getConfig() {
      return this.config;
    }

    /**
     * Set the global config object
     *
     * @return Client
     */

  }, {
    key: 'setConfig',
    value: function setConfig(config) {
      this.config = config;

      return this;
    }
  }]);

  return Client;
}();

exports.default = Client;