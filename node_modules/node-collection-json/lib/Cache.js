'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Client = require('./Client');

var _Client2 = _interopRequireDefault(_Client);

var _Collection = require('./Collection');

var _Collection2 = _interopRequireDefault(_Collection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class: Cache
 *
 * Caches collection objects for optimized retrieval
 *
 * @author S. Fleming <nuxnik@int5.net>
 * @since Tue Apr 10 11:38:43 CEST 2018
 */
var Cache = function () {
  _createClass(Cache, null, [{
    key: 'DEFAULT_TTL',

    /**
     * The default time to live value for the cache. Time is in seconds
     *
     * @return integer
     */
    get: function get() {
      return 2 * 60;
    }

    /**
     * The collection cache key
     *
     * @return string
     */

  }, {
    key: 'KEY_COLLECTION',
    get: function get() {
      return "COLLECTION";
    }

    /**
     * The collection cache key
     *
     * @return string
     */

  }, {
    key: 'KEY_TTL',
    get: function get() {
      return "TTL";
    }

    /**
     * The collection cache key
     *
     * @return string
     */

  }, {
    key: 'KEY_ACCESSED',
    get: function get() {
      return "ACCESSED";
    }

    /**
     * The class constructor
     *
     * @param {integer} ttl Time to live (in seconds) before caching object should be refreshed
     */

  }]);

  function Cache() {
    var ttl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Cache.DEFAULT_TTL;

    _classCallCheck(this, Cache);

    this.setTimeToLive(ttl);
    this.reset();
    this.cache = {};
  }

  /**
   * Get TimeToLive
   *
   * @since Tue Apr 10 12:01:31 CEST 2018
   */


  _createClass(Cache, [{
    key: 'getTimeToLive',
    value: function getTimeToLive() {
      return this.ttl;
    }

    /**
     * Set TimeToLive
     *
     * @param {integer} ttl The cache time to live (in seconds)
     * @return Cache
     */

  }, {
    key: 'setTimeToLive',
    value: function setTimeToLive(ttl) {
      this.ttl = ttl;

      return this;
    }

    /**
     * Reset the cache
     *
     * @since Tue Apr 10 11:43:38 CEST 2018
     */

  }, {
    key: 'reset',
    value: function reset() {
      this.cache = {};
      return this;
    }

    /**
     * clean up the garbage.
     *
     * @since Tue Apr 10 11:43:38 CEST 2018
     */

  }, {
    key: 'clean',
    value: function clean() {
      var now = new Date();
      for (var resource in this.cache) {
        if (resource[_Client2.default.KEY_TTL] < now) {
          delete this.cache[resource];
        }
      }

      return this;
    }

    /**
     * Clean the cache by resource name
     *
     * @param {String} resource The resource key
     * @return Cache
     */

  }, {
    key: 'cleanByResource',
    value: function cleanByResource(resource) {
      if (resource in this.cache) {
        delete this.cache[resource];
      }
      return this;
    }

    /**
     * Add a collection to the cache
     *
     * @since Tue Apr 10 11:45:20 CEST 2018
     */

  }, {
    key: 'addCollection',
    value: function addCollection(collection) {
      // add the seconds to the time to live
      var ttl = new Date();
      ttl.setSeconds(ttl.getSeconds() + this.ttl);

      this.cache[collection.getHref()] = {};
      this.cache[collection.getHref()][Cache.KEY_COLLECTION] = collection;
      this.cache[collection.getHref()][Cache.KEY_TTL] = ttl;
      this.cache[collection.getHref()][Cache.KEY_ACCESSED] = 0;

      return this;
    }

    /**
     * getCollectionByResource
     *
     * @since Tue Apr 10 15:41:00 CEST 2018
     * @param {String} resource The resource key/name
     */

  }, {
    key: 'getCollectionByResource',
    value: function getCollectionByResource(resource) {
      if (this.cache[resource] != undefined) {
        this.cache[resource][Cache.KEY_ACCESSED]++;
        return this.cache[resource][Cache.KEY_COLLECTION];
      }

      return new _Collection2.default(resource);
    }

    /**
     * getAccessedByResource
     *
     * The number of times the cache has been accessed
     * @since Tue Apr 10 15:41:00 CEST 2018
     * @param {String} resource The resource key/name
     */

  }, {
    key: 'getAccessedByResource',
    value: function getAccessedByResource(resource) {
      if (resource in this.cache) {
        return this.cache[resource][Cache.KEY_ACCESSED];
      }

      return 0;
    }

    /**
     * getTimeToLiveByResource
     *
     * The time to live value
     * @since Tue Apr 10 15:41:00 CEST 2018
     * @param {String} resource The resource key/name
     * @return Date
     */

  }, {
    key: 'getTimeToLiveByResource',
    value: function getTimeToLiveByResource(resource) {
      if (resource in this.cache) {
        return new Date(this.cache[resource][Cache.KEY_TTL]);
      }

      return new _Collection2.default(resource);
    }

    /**
     * Check if the resource is cached
     *
     * @return boolean
     */

  }, {
    key: 'isResourceCached',
    value: function isResourceCached(resource) {
      if (this.cache[resource] != undefined) {
        if (this.cache[resource][Cache.KEY_TTL] > new Date()) {
          return true;
        } else {
          this.cleanByResource(resource);
          return false;
        }
      } else {
        return false;
      }
    }

    /**
     * getData
     *
     * @since Tue Apr 10 15:20:58 CEST 2018
     * @return Object
     */

  }, {
    key: 'getData',
    value: function getData() {
      return this.cache;
    }
  }]);

  return Cache;
}();

exports.default = Cache;