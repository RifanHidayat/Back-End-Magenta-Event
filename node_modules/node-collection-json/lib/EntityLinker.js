'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Entity2 = require('./Entity');

var _Entity3 = _interopRequireDefault(_Entity2);

var _Link = require('./Link');

var _Link2 = _interopRequireDefault(_Link);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * EntityLinker class. Used as an abstract class with helper methods that linkable Collection+JSON classes inherit.
 *
 * @author S. Fleming <nuxnik@int5.net>
 * @since Tue Sep 12 12:59:11 CEST 2017
 */
var EntityLinker = function (_Entity) {
  _inherits(EntityLinker, _Entity);

  function EntityLinker() {
    _classCallCheck(this, EntityLinker);

    return _possibleConstructorReturn(this, (EntityLinker.__proto__ || Object.getPrototypeOf(EntityLinker)).apply(this, arguments));
  }

  _createClass(EntityLinker, [{
    key: 'getLinkByRel',

    /**
     * Get a link object by the rel name
     *
     * @param {String} name The rel name
     * @return Link
     */
    value: function getLinkByRel(rel) {
      // check the links object
      if (this.links !== null && this.links.length > 0) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.links[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var link = _step.value;

            if (link.getRel() == rel) {
              return link;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      // compose the error message
      var errorMessage = "No such link found rel: " + rel;
      console.log(errorMessage);

      // return empty link object
      return new _Link2.default(null, null);
    }
  }]);

  return EntityLinker;
}(_Entity3.default);

exports.default = EntityLinker;