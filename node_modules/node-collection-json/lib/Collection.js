'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _EntityLinker2 = require('./EntityLinker');

var _EntityLinker3 = _interopRequireDefault(_EntityLinker2);

var _Error = require('./Error');

var _Error2 = _interopRequireDefault(_Error);

var _Item = require('./Item');

var _Item2 = _interopRequireDefault(_Item);

var _Link = require('./Link');

var _Link2 = _interopRequireDefault(_Link);

var _Library = require('./Library');

var _Library2 = _interopRequireDefault(_Library);

var _Query = require('./Query');

var _Query2 = _interopRequireDefault(_Query);

var _Template = require('./Template');

var _Template2 = _interopRequireDefault(_Template);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Creates and validates collection+json object
 *
 * @author S. Fleming <nuxnik@int5.net>
 * @since Tue Jul 25 11:07:32 CEST 2017
 */
var Collection = function (_EntityLinker) {
  _inherits(Collection, _EntityLinker);

  _createClass(Collection, null, [{
    key: 'parseTemplate',


    /**
     * parse data request in template form into a database friendly json object
     *
     * @param {Object} json The JSON object to parse (should be in Collection+JSON Template form)
     * @return Object
     */
    value: function parseTemplate(json) {
      var dbObject = {};

      //check the template object
      var templateObject = Collection.getObjectValueByKey(json, Collection.TEMPLATE);
      if (templateObject !== undefined) {
        var template = _Template2.default.getByObject(templateObject);
        dbObject = template.getDatabaseObject();
      }
      return dbObject;
    }

    /**
     * Import a collection string and transform into a collection object
     *
     * @param {String} collection - The string to import
     * @param {Object} config The axios configuration object. See axios documentation for more options
     * @param {Object} cache The caching object
     * @return Collection
     */

  }, {
    key: 'getByObject',
    value: function getByObject(json) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var cache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      //check the collection object
      var collectionObject = Collection.getObjectValueByKey(json, Collection.COLLECTION);
      if (collectionObject === undefined) {}
      //throw new CollectionError('collection Object undefined');


      //check the version
      var versionString = Collection.getObjectValueByKey(collectionObject, "version");
      if (versionString === undefined) {}
      //throw new CollectionError('collection.version String undefined');


      //check the href
      var hrefString = Collection.getObjectValueByKey(collectionObject, "href");
      if (hrefString === undefined) {}
      //throw new CollectionError('collection.href String undefined');


      // create the collection object
      var collection = new Collection(hrefString, config, cache);

      // check the links object
      var linksObject = Collection.getObjectValueByKey(collectionObject, Collection.LINKS);
      if (_Library2.default.isArray(linksObject)) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = linksObject[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var linkObject = _step.value;


            // add the link
            try {
              var link = _Link2.default.getByObject(linkObject, config, cache);
              collection.addLink(link);
            } catch (error) {
              // skip this link
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      // check the items object
      var itemsObject = Collection.getObjectValueByKey(collectionObject, Collection.ITEMS);
      if (_Library2.default.isArray(itemsObject)) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = itemsObject[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var itemObject = _step2.value;


            // add the item
            try {
              var item = _Item2.default.getByObject(itemObject, config, cache);
              collection.addItem(item);

              if (cache !== null) {
                // cache the item into seperate collection
                var itemCollection = new Collection(item.getHref(), config, cache);

                // check the links object
                var _linksObject = Collection.getObjectValueByKey(collectionObject, Collection.LINKS);
                if (_Library2.default.isArray(_linksObject)) {
                  var _iteratorNormalCompletion3 = true;
                  var _didIteratorError3 = false;
                  var _iteratorError3 = undefined;

                  try {
                    for (var _iterator3 = _linksObject[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                      var _linkObject = _step3.value;


                      // add the link
                      try {
                        var _link = _Link2.default.getByObject(_linkObject, config, cache);
                        itemCollection.addLink(_link);
                      } catch (error) {
                        // skip this link
                      }
                    }
                  } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                      }
                    } finally {
                      if (_didIteratorError3) {
                        throw _iteratorError3;
                      }
                    }
                  }
                }
                itemCollection.addItem(item);
                cache.addCollection(itemCollection);
              }
            } catch (error) {
              // skip this item
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      // check the querys object
      var queriesObject = Collection.getObjectValueByKey(collectionObject, Collection.QUERIES);
      if (_Library2.default.isArray(queriesObject)) {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = queriesObject[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var queryObject = _step4.value;


            // add the query
            try {
              var query = _Query2.default.getByObject(queryObject, config, cache);
              collection.addQuery(query);
            } catch (error) {
              console.log(error.message);
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }

      //check the template object
      var templateObject = Collection.getObjectValueByKey(collectionObject, Collection.TEMPLATE);
      if (templateObject !== undefined) {

        // add the template
        try {
          var template = _Template2.default.getByObject(templateObject);
          collection.setTemplate(template);
        } catch (error) {
          console.log(error.message);
        }
      }

      //check the error object
      var errorObject = Collection.getObjectValueByKey(collectionObject, Collection.ERROR);
      if (errorObject !== undefined) {

        // add the error
        try {
          var error = _Error2.default.getByObject(errorObject);
          collection.setError(error);
        } catch (error) {
          console.log(error.message);
        }
      }

      // cache collection
      if (cache !== null) {
        cache.addCollection(collection);
      }

      return collection;
    }

    /**
     * The class constructor
     *
     * @param {String} url The api root uri
     * @param {Object} config The axios configuration object. See axios documentation for more options
     * @param {Object} cache The caching object
     */

  }, {
    key: 'VERSION',

    /**
     * Get the collection version
     *
     * @return string
     */
    get: function get() {
      return "1.0";
    }

    /**
     * Get the default content type
     *
     * @return string
     */

  }, {
    key: 'CONTENT_TYPE',
    get: function get() {
      return "application/vnd.collection+json";
    }

    /**
     * Get collection node name
     *
     * @return string
     */

  }, {
    key: 'COLLECTION',
    get: function get() {
      return "collection";
    }

    /**
     * Get links node name
     *
     * @return string
     */

  }, {
    key: 'LINKS',
    get: function get() {
      return "links";
    }

    /**
     * Get items node name
     *
     * @return string
     */

  }, {
    key: 'ITEMS',
    get: function get() {
      return "items";
    }

    /**
     * Get queries node name
     *
     * @return string
     */

  }, {
    key: 'QUERIES',
    get: function get() {
      return "queries";
    }

    /**
     * Get template node name
     *
     * @return string
     */

  }, {
    key: 'TEMPLATE',
    get: function get() {
      return "template";
    }

    /**
     * Get error node name
     *
     * @return string
     */

  }, {
    key: 'ERROR',
    get: function get() {
      return "error";
    }
  }]);

  function Collection(uri) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var cache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, Collection);

    /**
     * The axios configuration object.
     */
    var _this = _possibleConstructorReturn(this, (Collection.__proto__ || Object.getPrototypeOf(Collection)).call(this));

    _this.config = config;

    /**
     * The default content type header
     *
     * @var string
     */
    _this.contentType = Collection.CONTENT_TYPE;

    /**
     * The api root uri
     *
     * @var string
     */
    _this.href = uri;

    /**
     * The api links array
     *
     * @var array
     */
    _this.links = [];

    /**
     * The items data array
     *
     * @var array
     */
    _this.items = [];

    /**
     * The query method data definition array
     *
     * @var array
     */
    _this.queries = [];

    /**
     * The data template definition
     *
     * @var object
     */
    _this.template = {};

    /**
     * The error object
     *
     * @var object
     */
    _this.error = {};

    /**
     * The cache object
     *
     * @var array
     */
    _this.cache = cache;
    return _this;
  }

  /**
   * Get the API uri definition
   *
   * @return string
   */


  _createClass(Collection, [{
    key: 'getHref',
    value: function getHref() {
      return this.href;
    }

    /**
     * Get the colleciton version number
     *
     * @return String
     */

  }, {
    key: 'getVersion',
    value: function getVersion() {
      return Collection.VERSION;
    }

    /**
     * Add link object to the collection
     *
     * @param object link The link object
     * @see Link
     * @return Collection
     */

  }, {
    key: 'addLink',
    value: function addLink(link) {
      this.links.push(link);

      return this;
    }

    /**
     * Get array of link strings
     *
     * @return array
     */

  }, {
    key: 'getLinks',
    value: function getLinks() {
      return this.links;
    }

    /**
     * Add item object to the collection
     *
     * @param object item The item object
     * @see Item
     * @return Collection
     */

  }, {
    key: 'addItem',
    value: function addItem(item) {
      this.items.push(item);

      return this;
    }

    /**
     * Get an item instance
     *
     * @param String url - The item url
     * @return Item
     */

  }, {
    key: 'getItem',
    value: function getItem(url) {
      return new _Item2.default(url);
    }

    /**
     * Get array of item strings
     *
     * @return array
     */

  }, {
    key: 'getItems',
    value: function getItems() {
      return this.items;
    }

    /**
     * Get Item by value
     *
     * @param String key The item key
     * @param String value The item value to search for
     */

  }, {
    key: 'getItemByKeyAndValue',
    value: function getItemByKeyAndValue(key, value) {
      for (var item in this.items) {
        if (this.items[item].getDataValueByName(key) == value) {
          return this.items[item];
        }
      }
    }

    /**
     * Get Item by array position index
     *
     * @param String index The item index
     */

  }, {
    key: 'getItemByIndex',
    value: function getItemByIndex(key) {
      return this.items[key];
    }

    /**
     * Get the first item
     *
     * @return Item
     */

  }, {
    key: 'getFirstItem',
    value: function getFirstItem() {
      var item = null;
      if (typeof this.items[0] !== "undefined") {
        item = this.items[0];
      }

      return item;
    }

    /**
     * Add query object to the collection
     *
     * @param object query The query object
     * @see Query
     * @return Collection
     */

  }, {
    key: 'addQuery',
    value: function addQuery(query) {
      this.queries.push(query);

      return this;
    }

    /**
     * Get an query instance
     *
     * @param String url - The item url
     * @return Query
     */

  }, {
    key: 'getQuery',
    value: function getQuery() {
      return new _Query2.default();
    }

    /**
     * Get an query instance by rel
     *
     * @param String rel - The query rel
     * @return Query
     */

  }, {
    key: 'getQueryByRel',
    value: function getQueryByRel(rel) {
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = this.getQueries()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var query = _step5.value;

          if (query.getRel() == rel) {
            return query;
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return new _Query2.default(url);
    }

    /**
     * Get array of query objects
     *
     * @return array
     */

  }, {
    key: 'getQueries',
    value: function getQueries() {
      return this.queries;
    }

    /**
     * Set the template object
     *
     * @param Template template The template object
     * @see Template
     * @return Collection
     */

  }, {
    key: 'setTemplate',
    value: function setTemplate(template) {
      this.template = template;
    }

    /**
     * Get the template object
     *
     * @return Template
     */

  }, {
    key: 'getTemplate',
    value: function getTemplate() {
      return this.template;
    }

    /**
     * Set the error object
     *
     * @param Error error The error object
     * @see error
     * @return Collection
     */

  }, {
    key: 'setError',
    value: function setError(error) {
      this.error = error;
    }

    /**
     * Get the error object
     *
     * @return error
     */

  }, {
    key: 'getError',
    value: function getError() {
      return this.error;
    }

    /**
     * Get compiled json object
     *
     * @return Object
     */

  }, {
    key: 'getJson',
    value: function getJson() {
      // create the collection
      var collection = {};
      collection.version = Collection.VERSION;
      collection.href = this.href;

      // add the links
      if (this.getLinks().length > 0) {
        collection.links = [];
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = this.getLinks()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var link = _step6.value;

            collection.links.push(link.getJson());
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }
      }

      // add the items
      if (this.getItems().length > 0) {
        collection.items = [];
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = this.getItems()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var item = _step7.value;

            collection.items.push(item.getJson());
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }
      }

      // add the querys
      if (this.getQueries().length > 0) {
        collection.queries = [];
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          for (var _iterator8 = this.getQueries()[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var query = _step8.value;

            collection.queries.push(query.getJson());
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8.return) {
              _iterator8.return();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }
      }

      // add template
      if (Object.keys(this.getTemplate()).length > 0 && this.getTemplate().getData().length > 0) {
        collection.template = this.getTemplate().getJson();
      }

      // add error
      if (Object.keys(this.getError()).length > 0) {
        collection.error = this.getError().getJson();
      }

      return { collection: collection };
    }

    /**
     * Get item as a flattened vanilla JSON object
     *
     * @return Object
     */

  }, {
    key: 'itemsAsJson',
    value: function itemsAsJson() {
      var json = [];

      // flatten the data into an object
      if (this.getItems().length > 0) {
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = this.getItems()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var item = _step9.value;

            json.push(item.asJson());
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9.return) {
              _iterator9.return();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }
      }

      return json;
    }

    /**
     * Get ContentType
     *
     * @return String
     */

  }, {
    key: 'getContentType',
    value: function getContentType() {
      return this.contentType;
    }

    /**
     * Set ContentType
     *
     * @param {contentType} The contentType header value to set
     * @return Collection
     */

  }, {
    key: 'setContentType',
    value: function setContentType(contentType) {
      this.contentType = contentType;

      return this;
    }

    /**
     * Post template contents to the server
     *
     * @return Promise
     */

  }, {
    key: 'post',
    value: function post() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this.dispatch('post', null, config);
    }

    /**
     * Put template contents to the server
     *
     * @return Promise
     */

  }, {
    key: 'put',
    value: function put(resource) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.dispatch('put', resource, config);
    }

    /**
     * Send template contents to the server and get new collection
     *
     * @param {String} method The HTTP method
     * @param {String} resource The resource URL string
     * @param {Object} config The axios configuration object. See axios documentation for options
     * @return Promise
     */

  }, {
    key: 'dispatch',
    value: function dispatch(method) {
      var _this2 = this;

      var resource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (Object.keys(config).length === 0 && config.constructor === Object) {
        config = this.config;
      }

      // set the method
      config.method = method;

      // set the resource
      var url = this.getHref();
      if (resource !== null) {
        url = resource;
      }
      config.url = url;

      // add the content type header
      if (config.headers === undefined) {
        config.headers = {};
      }

      // set the content type header
      if (config.headers["Content-Type"] === undefined) {
        config.headers["Content-Type"] = this.contentType;
      }

      // create the template payload
      var templateData = {};
      if (typeof config.data != "undefined") {
        for (var key in config.data) {
          this.getTemplate().setData(key, config.data[key]);
        }
      }
      templateData.template = this.getTemplate().getJson();
      config.data = JSON.stringify(templateData);

      // dispatch
      switch (method) {
        case 'put':
        case 'post':
          return new Promise(function (resolve, reject) {
            (0, _axios2.default)(config).then(function (response) {
              var collection = Collection.getByObject(response.data, _this2.config, _this2.cache);
              _this2.cache.addCollection(collection);
              return resolve(collection);
            }).catch(function (error) {
              var collection = Collection.getByObject(response.data, _this2.config, _this2.cache);
              _this2.cache.addCollection(collection);
              return reject(collection);
            });
          });
          break;
        // case 'patch':
        default:
          throw new _Error2.default("Method type: " + method + " not found");
          break;
      }
    }
  }]);

  return Collection;
}(_EntityLinker3.default);

exports.default = Collection;