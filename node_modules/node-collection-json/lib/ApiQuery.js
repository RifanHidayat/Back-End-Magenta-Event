"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class: ApiQuery
 *
 * Query object for JSON+Collection APIs
 *
 * @author S. Fleming <nuxnik@int5.net>
 * @since Mon 26 Aug 2019 01:46:03 PM CEST
 */
var ApiQuery = function () {
  _createClass(ApiQuery, null, [{
    key: "ROOT",

    /**
     * The ROOT type
     *
     * @return string
     */
    get: function get() {
      return "ROOT";
    }

    /**
     * The ITEM type
     *
     * @return string
     */

  }, {
    key: "ITEM",
    get: function get() {
      return "ITEM";
    }
  }]);

  function ApiQuery() {
    _classCallCheck(this, ApiQuery);

    /**
     * The query parameters
     *
     * @var Object
     */
    this.params = {};

    this.index;
    this.searchKey;
    this.searchValue;
    this.node;
    this.type;
    this.link;
    this.hrefExtension = '';
  }
  /**
   * Add parameters to the query
   *
   * @param {Object} params The parameter object
   * @since Mon 26 Aug 2019 02:01:12 PM CEST
   * @return ApiQuery
   */


  _createClass(ApiQuery, [{
    key: "addParams",
    value: function addParams(params) {
      this.params = params;

      return this;
    }

    /**
     * getParamsAsString
     *
     * @since Mon 26 Aug 2019 02:04:35 PM CEST
     * @return string
     */

  }, {
    key: "getParamsAsString",
    value: function getParamsAsString() {
      var string = '';
      for (var key in this.params) {
        string += key + '=' + this.params[key] + "&";
      }
      return string.substring(0, string.length - 1);;
    }

    /**
     * setIndex
     *
     * @param {number} index The item index to fetch
     * @since Mon 26 Aug 2019 02:02:05 PM CEST
     * @return ApiQuery
     */

  }, {
    key: "setIndex",
    value: function setIndex(index) {
      this.index = index;

      return this;
    }

    /**
     * getIndex
     *
     * @since Mon 26 Aug 2019 02:05:06 PM CEST
     * @return number
     */

  }, {
    key: "getIndex",
    value: function getIndex() {
      return this.index;
    }

    /**
     * hasIndex
     *
     * @since Mon 26 Aug 2019 02:05:13 PM CEST
     */

  }, {
    key: "hasIndex",
    value: function hasIndex() {
      return this.index != undefined ? true : false;
    }

    /**
     * search
     *
     * @since Mon 26 Aug 2019 02:02:48 PM CEST
     * @return ApiQuery
     */

  }, {
    key: "search",
    value: function search(key, value) {
      this.searchKey = key;
      this.searchValue = value;

      return this;
    }

    /**
     * getSearchKey
     *
     * @since Mon 26 Aug 2019 02:06:01 PM CEST
     * @return string
     */

  }, {
    key: "getSearchKey",
    value: function getSearchKey() {
      return this.searchKey;
    }

    /**
     * getSearchValue
     *
     * @since Mon 26 Aug 2019 02:06:12 PM CEST
     * @return string
     */

  }, {
    key: "getSearchValue",
    value: function getSearchValue() {
      return this.searchValue;
    }

    /**
     * isSearchable
     *
     * @since Mon 26 Aug 2019 02:05:37 PM CEST
     * @return boolean
     */

  }, {
    key: "isSearchable",
    value: function isSearchable() {
      return this.searchValue != undefined || this.searchKey != undefined ? true : false;
    }

    /**
     * getNode
     *
     * @since Mon 26 Aug 2019 02:04:07 PM CEST
     * @return string
     */

  }, {
    key: "getNode",
    value: function getNode() {
      return this.node;
    }

    /**
     * setNode
     *
     * @param string node The rel link name
     * @since Mon 26 Aug 2019 02:04:12 PM CEST
     * @return string
     */

  }, {
    key: "setNode",
    value: function setNode(node) {
      this.node = node;

      return this;
    }

    /**
     * getType
     *
     * @since Mon 26 Aug 2019 02:27:50 PM CEST
     * @return string:
     */

  }, {
    key: "getType",
    value: function getType() {
      return this.type;
    }

    /**
     * setType
     *
     * @param {String} Set the type
     * @since Mon 26 Aug 2019 02:28:07 PM CEST
     */

  }, {
    key: "setType",
    value: function setType(type) {
      this.type = type;
      return this;
    }

    /**
     * Get Link
     *
     * @since Tue 27 Aug 2019 02:40:22 PM CEST
     * @return string
     */

  }, {
    key: "getLink",
    value: function getLink() {
      return this.link;
    }

    /**
     * Set Link
     *
     * @param {String} link The link to set
     * @return QueryBuilder
     */

  }, {
    key: "setLink",
    value: function setLink(link) {
      this.link = link;

      return this;
    }

    /**
     * isRoot
     *
     * @since Mon 26 Aug 2019 03:21:15 PM CEST
     */

  }, {
    key: "isRoot",
    value: function isRoot() {
      return this.type == ApiQuery.ROOT ? true : false;
    }

    /**
     * isItem
     *
     * @since Mon 26 Aug 2019 03:21:49 PM CEST
     */

  }, {
    key: "isItem",
    value: function isItem() {
      return this.type == ApiQuery.ITEM ? true : false;
    }

    /**
     * Extend the endpoint
     *
     * @param {String} ext The url extension
     * @return QueryBuilder
     */

  }, {
    key: "addHrefExtension",
    value: function addHrefExtension(ext) {
      this.hrefExtension += ext;

      return this;
    }

    /**
     * Set the href extension string
     *
     * @return string
     */

  }, {
    key: "getHrefExtension",
    value: function getHrefExtension() {
      return this.hrefExtension;
    }
  }]);

  return ApiQuery;
}();

exports.default = ApiQuery;