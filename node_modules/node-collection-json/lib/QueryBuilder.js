'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiQuery = require('./ApiQuery');

var _ApiQuery2 = _interopRequireDefault(_ApiQuery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class: QueryBuilder
 *
 * Builds queries for JSON+Collection APIs
 *
 * @author S. Fleming <nuxnik@int5.net>
 * @since Mon 26 Aug 2019 01:46:03 PM CEST
 */
var QueryBuilder = function () {
  /**
   * The class constructor
   */
  function QueryBuilder() {
    _classCallCheck(this, QueryBuilder);

    /**
     * The current index
     *
     * @var number
     */
    this.index = 0;

    /**
     * The queries array
     *
     * @var array
     */
    this.queries = [];
  }

  /**
   * increment the index
   *
   * @return QueryBuilder
   */


  _createClass(QueryBuilder, [{
    key: 'next',
    value: function next() {
      this.index++;

      return this;
    }

    /**
     * Decrement the index
     *
     * @return QueryBuilder
     */

  }, {
    key: 'prev',
    value: function prev() {
      this.index--;

      return this;
    }

    /**
     * Reset the index
     *
     * @return QueryBuilder
     */

  }, {
    key: 'resetIndex',
    value: function resetIndex() {
      this.index = 0;

      return this;
    }

    /**
     * Get the root node query object
     *
     * @param {String} node The rel/node name
     * @return ApiQuery
     */

  }, {
    key: 'root',
    value: function root(node) {
      var query = this.getQuery().setType(_ApiQuery2.default.ROOT).setNode(node);
      this.next();
      return query;
    }

    /**
     * Get the item node query object
     *
     * @param {String} node The rel/node name
     * @return ApiQuery
     */

  }, {
    key: 'item',
    value: function item(node) {
      var query = this.getQuery().setType(_ApiQuery2.default.ITEM).setNode(node);
      this.next();
      return query;
    }
  }, {
    key: 'link',
    value: function link(_link) {
      var query = this.getQuery().setLink(_link);
      this.next();
      return query;
    }

    /**
     * Get the current query object. Alias of getQuery
     *
     * @return ApiQuery
     */

  }, {
    key: 'current',
    value: function current() {
      return this.getQuery();
    }

    /**
     * Get the current query object.
     *
     * @return ApiQuery
     */

  }, {
    key: 'getQuery',
    value: function getQuery() {
      if (this.queries[this.index] == undefined) {
        this.queries[this.index] = new _ApiQuery2.default();
      }

      return this.queries[this.index];
    }

    /**
     * isQuery
     *
     * @since Mon 26 Aug 2019 03:52:13 PM CEST
     */

  }, {
    key: 'isQuery',
    value: function isQuery() {
      return this.queries[this.index] ? true : false;
    }

    /**
     * Get array of query objects
     * 
     * @return array
     */

  }, {
    key: 'getQueries',
    value: function getQueries() {
      return this.queries;
    }
  }]);

  return QueryBuilder;
}();

exports.default = QueryBuilder;