'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CollectionError = require('./CollectionError');

var _CollectionError2 = _interopRequireDefault(_CollectionError);

var _Data = require('./Data');

var _Data2 = _interopRequireDefault(_Data);

var _EntityLinker2 = require('./EntityLinker');

var _EntityLinker3 = _interopRequireDefault(_EntityLinker2);

var _Library = require('./Library');

var _Library2 = _interopRequireDefault(_Library);

var _Link = require('./Link');

var _Link2 = _interopRequireDefault(_Link);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Creates a valid collection+json item object
 *
 * @author S. Fleming <nuxnik@int5.net>
 * @since Tue Jul 25 11:07:32 CEST 2017
 */
var Item = function (_EntityLinker) {
  _inherits(Item, _EntityLinker);

  _createClass(Item, null, [{
    key: 'getByObject',


    /**
     * Get item object by json data object
     *
     * @param {Object} json The JSON object
     * @param {Object} config The axios configuration object. See axios documentation for more options
     * @param {Object} cache The caching object
     * @return item
     */
    value: function getByObject(json) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var cache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      //check the href
      var hrefString = Item.getObjectValueByKey(json, "href");
      if (hrefString === undefined) {
        throw new _CollectionError2.default('item.href String undefined');
      }

      // init the Item object
      var item = new Item(hrefString, config, cache);

      // check the datas object
      var datasObject = Item.getObjectValueByKey(json, "data");
      if (_Library2.default.isArray(datasObject)) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = datasObject[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var dataObject = _step.value;


            // add the data
            try {
              var data = _Data2.default.getByObject(dataObject);
              item.addData(data);
            } catch (error) {
              // skip this data
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      // check the links object
      var linksObject = Item.getObjectValueByKey(json, "links");
      if (_Library2.default.isArray(linksObject)) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = linksObject[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var linkObject = _step2.value;


            // add the link
            try {
              var link = _Link2.default.getByObject(linkObject, config, cache);
              item.addLink(link);
            } catch (error) {
              // skip this link
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      return item;
    }

    /**
     * The class constructor
     *
     * @param string href The href uri
     * @param {Object} config The axios configuration object. See axios documentation for more options
     * @param {Object} cache The caching object
     */

  }]);

  function Item(href) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var cache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, Item);

    var _this = _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this));

    _this.setHref(href);

    /**
     * The global axios client configuration object
     */
    _this.config = config;

    /**
     * The data object
     *
     * @var array
     */
    _this.data = [];

    /**
     * The items data array
     *
     * @var array
     */
    _this.items = [];

    /**
     * The links data array
     *
     * @var array
     */
    _this.links = [];

    /**
     * The cache object
     *
     * @var array
     */
    _this.cache = cache;
    return _this;
  }

  /**
   * Get the link string
   *
   * @return string
   */


  _createClass(Item, [{
    key: 'getHref',
    value: function getHref() {
      return this.href;
    }

    /**
     * Set the link string
     *
     * @param string link The link uri
     * @return Link
     */

  }, {
    key: 'setHref',
    value: function setHref(href) {
      this.href = href;

      return this;
    }

    /**
     * Add data object to the collection
     *
     * @param object data The data object
     * @see Data
     * @return Item
     */

  }, {
    key: 'addData',
    value: function addData(data) {
      this.data.push(data);

      return this;
    }

    /**
     * Get array of data strings
     *
     * @return array
     */

  }, {
    key: 'getData',
    value: function getData() {
      return this.data;
    }

    /**
     * Add link object to the collection
     *
     * @param object link The link object
     * @see Link
     * @return Item
     */

  }, {
    key: 'addLink',
    value: function addLink(link) {
      this.links.push(link);

      return this;
    }

    /**
     * Get array of link strings
     *
     * @return array
     */

  }, {
    key: 'getLinks',
    value: function getLinks() {
      return this.links;
    }

    /**
     * Get compiled json object
     *
     * @return Object
     */

  }, {
    key: 'getJson',
    value: function getJson() {
      var item = {};
      if (this.href) {
        item.href = this.href;
      }

      // push the data
      if (this.getData().length > 0) {
        item.data = [];
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = this.getData()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var data = _step3.value;

            item.data.push(data.getJson());
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }

      // push the links
      if (this.getLinks().length > 0) {
        item.links = [];
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = this.getLinks()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var link = _step4.value;

            item.links.push(link.getJson());
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }

      return item;
    }

    /**
     * Get item as a flattened vanilla JSON object
     *
     * @return Object
     */

  }, {
    key: 'asJson',
    value: function asJson() {
      var json = {};

      // flatten the data into an object
      if (this.getData().length > 0) {
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = this.getData()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var data = _step5.value;

            json[data.getName()] = data.getValue();
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      }

      return json;
    }

    /**
     * Get a template object modeled on the data is defined in the object
     *
     * @return Template
     */

  }, {
    key: 'getTemplate',
    value: function getTemplate() {
      var template = new Template();
      template.addData();

      return template;
    }

    /**
     * Get a data value by the name key
     *
     * @param {String} name The name key to search by
     */

  }, {
    key: 'getDataValueByName',
    value: function getDataValueByName(name) {
      var foundData = null;
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = this.getData()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var data = _step6.value;

          if (data.getName() === name) {
            foundData = data.getValue();
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      return foundData;
    }

    /**
     * Delete the item from the server
     *
     * @param {Object} config The axios configuration object. See axios documentation for more options
     * @return Promise<Collection>
     */

  }, {
    key: 'delete',
    value: function _delete() {
      var _this2 = this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // get the config values
      var mergedConfig = _Library2.default.mergeConfigurationValues(this.config, config);

      return new Promise(function (resolve, reject) {
        _axios2.default.delete(_this2.getHref(), mergedConfig).then(function (response) {
          if (_this2.cache !== null) {
            _this2.cache.cleanByResource(_this2.getHref());
          }
          return resolve(Collection.getByObject(response.data, _this2.config));
        }).catch(function (error) {
          return resolve(Collection.getByObject(error.response.data, _this2.config));
        });
      });
    }

    /**
     * Follow the href link
     *
     * @param {Array} params Extra params to add to the url
     * @param {Object} config The axios configuration object. See axios documentation for more options
     * @return Promise
     */

  }, {
    key: 'follow',
    value: function follow() {
      var _this3 = this;

      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // get the config values
      var mergedConfig = _Library2.default.mergeConfigurationValues(this.config, config);

      // todo update the url parser
      var url = this.getHref();
      if (params !== null && params.constructor === Array) {
        url += '?';
        for (var key in params) {
          url += '&' + key + '=' + params[key];
        }
      }

      if (this.cache !== null && this.cache.isResourceCached(url)) {
        return Promise.resolve(this.cache.getCollectionByResource(url));
      } else {
        return _axios2.default.get(url, mergedConfig).then(function (response) {
          response.data.collection.href = url;
          var collection = Collection.getByObject(response.data, mergedConfig, _this3.cache);
          _this3.cache.addCollection(collection);
          return collection;
        }).catch(function (error) {
          var collection = Collection.getByObject(error.response.data, _this3.config, _this3.cache);
          return Promise.resolve(collection);
        });
      }
    }

    /**
     * follow and hydrate the links with data
     *
     * @param {array} rels The array of rels
     * @return Item
     */

  }, {
    key: 'hydrateLinks',
    value: function hydrateLinks() {
      var _this4 = this;

      var rels = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      var links = this.getLinks();
      var promiseArray = [];
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        var _loop = function _loop() {
          var link = _step7.value;

          if (rels.includes(link.getRel())) {
            promiseArray.push(new Promise(function (resolve, reject) {
              link.follow().then(function (collection) {
                _this4.addData(new _Data2.default(link.getRel(), collection, link.getRel()));
                resolve(true);
              });
            }));
          }
        };

        for (var _iterator7 = links[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7.return) {
            _iterator7.return();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      return Promise.all(promiseArray).then(function () {
        return _this4;
      });
    }

    /**
     * Add collection to cache
     *
     * @param Collection collection The collection to cache
     * @return Item
     */

  }, {
    key: 'addCache',
    value: function addCache(collection) {
      if (this.cache !== null) {
        this.cache.addCollection(collection);
      }
      return this;
    }
  }]);

  return Item;
}(_EntityLinker3.default);

exports.default = Item;