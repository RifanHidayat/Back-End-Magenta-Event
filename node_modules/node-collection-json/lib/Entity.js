"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Entity class. Used as an abstract class with helper methods that all Collection+JSON classes inherit.
 *
 * @author S. Fleming <nuxnik@int5.net>
 * @since Tue Aug  8 15:15:35 CEST 2017
 */
var Entity = function () {
  function Entity() {
    _classCallCheck(this, Entity);
  }

  _createClass(Entity, [{
    key: "get",


    /**
     * Get the data value by name
     *
     * @param {string} key the key value
     * @return mixed
     */
    value: function get(key) {
      return this.getDataByName(key).getValue();
    }

    /**
     * Get the data value by name
     *
     * @param {string} key the key value
     * @param {string} value the data value
     * @return mixed
     */

  }, {
    key: "set",
    value: function set(key, value) {
      this.getDataByName(key).setValue(value);

      return this;
    }

    /**
     * Output the collection to string format
     *
     * @return string
     */

  }, {
    key: "toString",
    value: function toString() {
      return JSON.stringify(this.getJson());
    }

    /**
     * Get the data object by name
     *
     * @param {string} name The name of the key to find
     * @return Data
     */

  }, {
    key: "getDataByName",
    value: function getDataByName(name) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var data = _step.value;

          if (data.getName() === name) {
            return data;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return new Data(key);
    }
  }], [{
    key: "getObjectValueByKey",

    /**
     * Helper method for getting an object value by key
     *
     * @param Object object the object to check
     * @param String key The key the chec
     * @return mixed
     */
    value: function getObjectValueByKey(object, key) {
      var value = object[key];
      return value;
    }
  }]);

  return Entity;
}();

exports.default = Entity;