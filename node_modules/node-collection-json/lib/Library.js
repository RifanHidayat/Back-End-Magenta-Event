'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class: Library
 *
 * General static methods needed in this project
 *
 * @author S. Fleming <nuxnik@int5.net>
 * @since Mon Nov  6 15:02:42 CET 2017
 */
var Library = function () {
  function Library() {
    _classCallCheck(this, Library);
  }

  _createClass(Library, null, [{
    key: 'isArray',


    /**
     * Helper method to check if a variable is an array
     *
     * @param {array} variable The variable to check
     * @return boolean
     */
    value: function isArray(variable) {
      var result = false;
      if (Object.prototype.toString.call(variable) === '[object Array]') {
        result = true;
      }

      return result;
    }

    /**
     * Merge the client configuration values
     *
     * @param {Object} global The global config values
     * @param {Object} local The local config values
     *
     * @return {Object}
     */

  }, {
    key: 'mergeConfigurationValues',
    value: function mergeConfigurationValues(global, local) {
      if (Object.keys(local).length === 0 && local.constructor === Object) {
        return global;
      } else {
        return local;
      }
    }
  }]);

  return Library;
}();

exports.default = Library;